#
# General options
#

# The size of tabs in the output (only used if align_with_tabs=true)
output_tab_size=4

#
# Code alignment (not left column spaces/tabs)
#

# The span for aligning on '=' in enums (0=don't align)
align_enum_equ_span=4

# Span for aligning parameters in an Obj-C message call on the ':' (0=don't align)
align_oc_msg_colon_span=0

# The span for aligning ObjC msg spec (0=don't align)
align_oc_msg_spec_span=0

# Whether to bump out to the next tab when aligning
align_on_tabstop=true

# The span for aligning on '#define' bodies (0=don't align)
align_pp_define_span=8

# If a trailing comment is more than this number of columns away from the text it follows,
# it will qualify for being aligned. This has to be > 0 to do anything.
align_right_cmt_gap=8

# The span for aligning comments that end lines (0=don't align)
align_right_cmt_span=8

# The span for aligning struct initializer values (0=don't align)
align_struct_init_span=4

# Whether to use tabs for aligning
align_with_tabs=true

#
# Comment modifications
#

# Whether to put a star on subsequent comment lines
cmt_star_cont=true

#
# Indenting
#

# Align continued statements at the '='. Default=True
# If FALSE or the '=' is followed by a newline, the next line is indent one tab.
indent_align_assign=false

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns=output_tab_size

# How to indent goto labels
#  >0 : absolute column where 1 is the leftmost column
#  <=0 : subtract from brace indent
indent_label=2

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case=indent_columns

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs=2

#
# Code modifying options (non-whitespace)
#

# Add or remove braces on single-line 'do' statement
mod_full_brace_do=ignore

# Add or remove braces on single-line 'for' statement
mod_full_brace_for=add

# Add or remove braces on single-line 'if' statement. Will not remove the braces if they contain an 'else'.
mod_full_brace_if=ignore

# Don't remove braces around statements that span N newlines
mod_full_brace_nl=3

# Add or remove braces on single-line 'while' statement
mod_full_brace_while=remove

# Add or remove unnecessary paren on 'return' statement
mod_paren_on_return=ignore

#
# Newline adding and removing options
#

# Add or remove newline between '}' and 'else'
nl_brace_else=force

# Add or remove newline between '}' and 'while' of 'do' statement
nl_brace_while=remove

# Add or remove newline between 'do' and '{'
nl_do_brace=remove

# Add or remove newline between 'else' and '{'
nl_else_brace=remove

# Add or remove newline between 'enum' and '{'
nl_enum_brace=remove

# Add or remove newline between a function call's ')' and '{', as in:
# list_for_each(item, &list) { }
nl_fcall_brace=remove

# Add or remove newline between function signature and '{'
nl_fdef_brace=remove

# Add or remove newline between 'for' and '{'
nl_for_brace=remove

# The number of blank lines after a block of variable definitions at the top of a function body
# 0 = No change (default)
nl_func_var_def_blk=1

# Add or remove newline between 'if' and '{'
nl_if_brace=remove

# Add or remove newline between 'struct and '{'
nl_struct_brace=remove

# Add or remove newline between 'switch' and '{'
nl_switch_brace=remove

# Add or remove newline between 'union' and '{'
nl_union_brace=remove

# Add or remove newline between 'while' and '{'
nl_while_brace=remove

#
# Spacing options
#

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'
sp_after_cast=remove

# Add or remove space after class ':'
sp_after_class_colon=force

# Add or remove space after ','
sp_after_comma=force

# Add or remove space between '@selector' and '('
# '@selector(msgName)' vs '@selector (msgName)'
# Also applies to @protocol() constructs
sp_after_oc_at_sel=remove

# Add or remove space after a block pointer caret
# '^int (int arg){...}' vs. '^ int (int arg){...}'
sp_after_oc_block_caret=remove

# Add or remove space after the colon in message specs
# '-(int) f:(int) x;' vs '-(int) f: (int) x;'
sp_after_oc_colon=remove

# Add or remove space after the colon in immutable dictionary expression
# 'NSDictionary *test = @{@"foo" :@"bar"};'
sp_after_oc_dict_colon=force

# Add or remove space after the first (type) in message specs
# '-(int) f:(int)x;' vs '-(int)f:(int)x;'
sp_after_oc_return_type=remove

# Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'
sp_after_oc_scope=force

# Add or remove space after the (type) in message specs
# '-(int)f: (int) x;' vs '-(int)f: (int)x;'
sp_after_oc_type=remove

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star=remove

# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func=force

# Add or remove space after the colon in message specs
# '[object setValue:1];' vs '[object setValue: 1];'
sp_after_send_oc_colon=remove

# Add or remove space after ')' of 'if', 'for', 'switch', and 'while'
sp_after_sparen=force

# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
sp_arith=ignore

# Add or remove space around assignment operator '=', '+=', etc
sp_assign=force

# Add or remove space before case ':'. Default=Remove
sp_before_case_colon=remove

# Add or remove space before class ':'
sp_before_class_colon=force

# Add or remove space before a block pointer caret
# '^int (int arg){...}' vs. ' ^int (int arg){...}'
sp_before_oc_block_caret=ignore

# Add or remove space before the colon in message specs
# '-(int) f: (int) x;' vs '-(int) f : (int) x;'
sp_before_oc_colon=remove

# Add or remove space before the colon in immutable dictionary expression
# 'NSDictionary *test = @{@"foo" :@"bar"};'
sp_before_oc_dict_colon=remove

# Add or remove space before pointer star '*'
sp_before_ptr_star=force

# Add or remove space before a pointer star '*', if followed by a func proto/def.
sp_before_ptr_star_func=force

# Add or remove space before the colon in message specs
# '[object setValue:1];' vs '[object setValue :1];'
sp_before_send_oc_colon=remove

# Add or remove space before '(' of 'if', 'for', 'switch', and 'while'
sp_before_sparen=force

# Add or remove space before pointer star '*' that isn't followed by a variable name
# If set to 'ignore', sp_before_ptr_star is used instead.
sp_before_unnamed_ptr_star=ignore

# Add or remove space between pointer stars '*'
sp_between_ptr_star=remove

# Add or remove space around boolean operators '&&' and '||'
sp_bool=force

# Add or remove space between '}' and 'else' if on the same line
sp_brace_else=force

# Control the space after the opening of a C++ comment '// A' vs '//A'
sp_cmt_cpp_start=force

# Add or remove space around compare operator '<', '>', '==', etc
sp_compare=force

# Add or remove space around the ':' in 'b ? t : f'
sp_cond_colon=force

# Add or remove space around the '?' in 'b ? t : f'
sp_cond_question=force

# Add or remove space between 'else' and '{' if on the same line
sp_else_brace=force

# Add or remove space between function name and '(' on function calls
sp_func_call_paren=remove

# Add or remove space between function name and '(' on function definition
sp_func_def_paren=remove

# Add or remove space between function name and '(' on function declaration
sp_func_proto_paren=remove

# Add or remove space inside '{' and '}'
sp_inside_braces=add

# Add or remove space inside enum '{' and '}'
sp_inside_braces_enum=add

# Add or remove space inside struct/union '{' and '}'
sp_inside_braces_struct=add

# Add or remove space inside function '(' and ')'
sp_inside_fparen=remove

# Add or remove space between ')' and '{'
sp_paren_brace=force

# Add or remove space between 'sizeof' and '('
sp_sizeof_paren=remove